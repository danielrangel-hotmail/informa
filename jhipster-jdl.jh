@dto(mapstruct)
entity Grupo {
	id UUID,
    versao Long,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    nome String,
    descricao String,
    formal Boolean,
    opcional Boolean,
    logo ImageBlob,
    cabecalhoSuperiorCor String,
    cabecalhoInferiorCor String,
    logoFundoCor String
}

@dto(mapstruct)
entity Topico {
	id UUID,
    versao Long,
    nome String
}

relationship ManyToMany  {
	Grupo{topicos} to Topico{grupos}
}

relationship OneToMany {
	Topico{substituidos} to Topico{substituto}
}

relationship ManyToOne {
	Topico{autor required} to User
}


@dto(mapstruct)
@service(serviceClass)
@paginate(infinite-scroll)
entity Post {
	id UUID,
    versao Long,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    conteudo String,
    oficial Boolean,
    publicacao ZonedDateTime
}

relationship ManyToOne {
	Post{autor required} to User,
    Post{grupo} to Grupo
}

@dto(mapstruct)
@service(serviceClass)
@paginate(infinite-scroll)
entity Mensagem {
	id UUID,
    versao Long,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    conteudo String,
    temConversa Boolean
}

relationship ManyToOne {
	Mensagem{autor required} to User,
    Mensagem{post} to Post,
    Mensagem{conversa} to Mensagem
}

@dto(mapstruct)
@service(serviceClass)
@paginate(infinite-scroll)
entity Arquivo {
	id UUID,
    versao Long,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    nome String,
    colecao String,
    tipo String,
    link String,
    uploadConfirmado Boolean
}

relationship ManyToOne {
	Arquivo{usuario required} to User,
}

relationship OneToMany {
    Post{arquivos} to Arquivo{post},
    Mensagem{arquivos} to Arquivo{mensagem}
}

@dto(mapstruct)
@service(serviceClass)
@paginate(infinite-scroll)
entity LinkExterno {
	id UUID,
    versao Long,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    tipo LinkTipo,
    link String,
}

relationship ManyToOne {
	LinkExterno{usuario required} to User,
}

relationship OneToMany {
    Post{linksExternos} to LinkExterno{post},
    Mensagem{linksExternos} to LinkExterno{mensagem}
}

enum LinkTipo {
	VIDEO,
    EXTERNO
}


@dto(mapstruct)
@service(serviceClass)
entity PushSubscription {
	id UUID,
    versao Long,
    criacao ZonedDateTime,
    endpoint String,
    key String,
    auth String
}

@dto(mapstruct)
@service(serviceClass)
@paginate(infinite-scroll)
entity PerfilUsuario {
	id UUID,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    versao Long,
	entradaNaEmpresa LocalDate,
    saidaDaEmpresa LocalDate,
	nascimento LocalDate,
    skype String,
    avatar ImageBlob,
}

relationship OneToOne {
	PerfilUsuario{usuario required} to User{perfil}
}

relationship OneToMany {
	PerfilUsuario{subscriptions} to PushSubscription{perfil required}
}

@dto(mapstruct)
@service(serviceClass)
@paginate(infinite-scroll)
entity PerfilGrupo {
	id UUID,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    versao Long,
    favorito Boolean,
    notifica Boolean,
    moderador Boolean,
}

relationship OneToMany {
	PerfilUsuario{grupos} to PerfilGrupo{perfil required}
	Grupo{usuarios} to PerfilGrupo{grupo required}
}

@dto(mapstruct)
@service(serviceClass)
entity PostReacao {
	id UUID,
    criacao ZonedDateTime,
    ultimaEdicao ZonedDateTime,
    versao Long,
	reacao String
}

relationship ManyToOne {
	PostReacao{perfil required} to PerfilUsuario 
}

relationship OneToMany {
	Post{reacoes} to PostReacao{post required}
}

